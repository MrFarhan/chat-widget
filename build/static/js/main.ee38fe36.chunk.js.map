{"version":3,"sources":["component/index.js","App.js","serviceWorker.js","index.js"],"names":["Review","props","state","name","gender","age","steps","this","setState","style","width","value","Component","defaultProps","undefined","SimpleForm","id","message","trigger","user","options","label","validator","isNaN","component","asMessage","update","end","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAIMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,IAAK,IANU,E,kFAUG,IACZC,EAAUC,KAAKN,MAAfK,MACAH,EAAsBG,EAAtBH,KAAMC,EAAgBE,EAAhBF,OAAQC,EAAQC,EAARD,IAEtBE,KAAKC,SAAS,CAAEL,OAAMC,SAAQC,U,+BAGtB,IAAD,EACuBE,KAAKL,MAA3BC,EADD,EACCA,KAAMC,EADP,EACOA,OAAQC,EADf,EACeA,IACtB,OACE,yBAAKI,MAAO,CAAEC,MAAO,SACnB,uCACA,+BACE,+BACE,4BACE,oCACA,4BAAKP,EAAKQ,QAEZ,4BACE,sCACA,4BAAKP,EAAOO,QAEd,4BACE,mCACA,4BAAKN,EAAIM,e,GAnCFC,aAgDrBZ,EAAOa,aAAe,CACpBP,WAAOQ,G,IAiHMC,E,iLA5GX,OACE,kBAAC,IAAD,CACET,MAAO,CACL,CACEU,GAAI,IACJC,QAAS,qBACTC,QAAS,QAEX,CACEF,GAAI,OACJG,MAAM,EACND,QAAS,KAEX,CACEF,GAAI,IACJC,QAAS,2CACTC,QAAS,UAEX,CACEF,GAAI,SACJI,QAAS,CACP,CAAET,MAAO,OAAQU,MAAO,OAAQH,QAAS,KACzC,CAAEP,MAAO,SAAUU,MAAO,SAAUH,QAAS,OAGjD,CACEF,GAAI,IACJC,QAAS,mBACTC,QAAS,OAEX,CACEF,GAAI,MACJG,MAAM,EACND,QAAS,IACTI,UAAW,SAAAX,GACT,OAAIY,MAAMZ,GACD,yBACEA,EAAQ,EACV,2BACEA,EAAQ,MACX,GAAN,OAAUA,EAAV,gBAMN,CACEK,GAAI,IACJC,QAAS,gCACTC,QAAS,UAEX,CACEF,GAAI,SACJQ,UAAW,kBAAC,EAAD,MACXC,WAAW,EACXP,QAAS,UAEX,CACEF,GAAI,SACJC,QAAS,uCACTC,QAAS,mBAEX,CACEF,GAAI,kBACJI,QAAS,CACP,CAAET,MAAO,MAAOU,MAAO,MAAOH,QAAS,cACvC,CAAEP,MAAO,KAAMU,MAAO,KAAMH,QAAS,iBAGzC,CACEF,GAAI,aACJC,QAAS,uCACTC,QAAS,iBAEX,CACEF,GAAI,gBACJI,QAAS,CACP,CAAET,MAAO,OAAQU,MAAO,OAAQH,QAAS,eACzC,CAAEP,MAAO,SAAUU,MAAO,SAAUH,QAAS,iBAC7C,CAAEP,MAAO,MAAOU,MAAO,MAAOH,QAAS,gBAG3C,CACEF,GAAI,cACJU,OAAQ,OACRR,QAAS,KAEX,CACEF,GAAI,gBACJU,OAAQ,SACRR,QAAS,KAEX,CACEF,GAAI,aACJU,OAAQ,MACRR,QAAS,KAEX,CACEF,GAAI,cACJC,QAAS,gDACTU,KAAK,U,GAtGQf,aC5CVgB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ee38fe36.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ChatBot from \"react-simple-chatbot\";\r\n\r\nclass Review extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      gender: \"\",\r\n      age: \"\"\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { steps } = this.props;\r\n    const { name, gender, age } = steps;\r\n\r\n    this.setState({ name, gender, age });\r\n  }\r\n\r\n  render() {\r\n    const { name, gender, age } = this.state;\r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n        <h3>Summary</h3>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td>Name</td>\r\n              <td>{name.value}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Gender</td>\r\n              <td>{gender.value}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>Age</td>\r\n              <td>{age.value}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReview.propTypes = {\r\n  steps: PropTypes.object\r\n};\r\n\r\nReview.defaultProps = {\r\n  steps: undefined\r\n};\r\n\r\nclass SimpleForm extends Component {\r\n  render() {\r\n    return (\r\n      <ChatBot\r\n        steps={[\r\n          {\r\n            id: \"1\",\r\n            message: \"What is your name?\",\r\n            trigger: \"name\"\r\n          },\r\n          {\r\n            id: \"name\",\r\n            user: true,\r\n            trigger: \"3\"\r\n          },\r\n          {\r\n            id: \"3\",\r\n            message: \"Hi {previousValue}! What is your gender?\",\r\n            trigger: \"gender\"\r\n          },\r\n          {\r\n            id: \"gender\",\r\n            options: [\r\n              { value: \"male\", label: \"Male\", trigger: \"5\" },\r\n              { value: \"female\", label: \"Female\", trigger: \"5\" }\r\n            ]\r\n          },\r\n          {\r\n            id: \"5\",\r\n            message: \"How old are you?\",\r\n            trigger: \"age\"\r\n          },\r\n          {\r\n            id: \"age\",\r\n            user: true,\r\n            trigger: \"7\",\r\n            validator: value => {\r\n              if (isNaN(value)) {\r\n                return \"value must be a number\";\r\n              } else if (value < 0) {\r\n                return \"value must be positive\";\r\n              } else if (value > 120) {\r\n                return `${value}? Come on!`;\r\n              }\r\n\r\n              return true;\r\n            }\r\n          },\r\n          {\r\n            id: \"7\",\r\n            message: \"Great! Check out your summary\",\r\n            trigger: \"review\"\r\n          },\r\n          {\r\n            id: \"review\",\r\n            component: <Review />,\r\n            asMessage: true,\r\n            trigger: \"update\"\r\n          },\r\n          {\r\n            id: \"update\",\r\n            message: \"Would you like to update some field?\",\r\n            trigger: \"update-question\"\r\n          },\r\n          {\r\n            id: \"update-question\",\r\n            options: [\r\n              { value: \"yes\", label: \"Yes\", trigger: \"update-yes\" },\r\n              { value: \"no\", label: \"No\", trigger: \"end-message\" }\r\n            ]\r\n          },\r\n          {\r\n            id: \"update-yes\",\r\n            message: \"What field would you like to update?\",\r\n            trigger: \"update-fields\"\r\n          },\r\n          {\r\n            id: \"update-fields\",\r\n            options: [\r\n              { value: \"name\", label: \"Name\", trigger: \"update-name\" },\r\n              { value: \"gender\", label: \"Gender\", trigger: \"update-gender\" },\r\n              { value: \"age\", label: \"Age\", trigger: \"update-age\" }\r\n            ]\r\n          },\r\n          {\r\n            id: \"update-name\",\r\n            update: \"name\",\r\n            trigger: \"7\"\r\n          },\r\n          {\r\n            id: \"update-gender\",\r\n            update: \"gender\",\r\n            trigger: \"7\"\r\n          },\r\n          {\r\n            id: \"update-age\",\r\n            update: \"age\",\r\n            trigger: \"7\"\r\n          },\r\n          {\r\n            id: \"end-message\",\r\n            message: \"Thanks! Your data was submitted successfully!\",\r\n            end: true\r\n          }\r\n        ]}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleForm;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport ChatComponent from \"./component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChatComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}